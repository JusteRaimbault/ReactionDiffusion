
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

> 
> #############
> # computation of real values of indicators on large grid on all europe
> #############
> 
> library(raster)
Le chargement a nécessité le package : sp
> 
> setwd(paste0(Sys.getenv("CN_HOME"),'/Models/Synthetic/Density'))
> 
> # to avoid bord effects dur to grid offset, takes "many" origin phases to setup the grid
> # (not too much -- perfs issues)
> 
> # use raster package
> 
> # first source indicators
> 
> source('morpho.R')
> 
> 
> # load all europe raster
> # Q : size of grid ? -> synthetic datasets are 101x101 rasters
> 
> #raw <- raster(paste0(Sys.getenv("CN_HOME"),"/Data/PopulationDensity/raw/popu01clcv5.tif"))
> raw <- raster(paste0(Sys.getenv("CN_HOME"),"/Data/PopulationDensity/raw/france.tif"))
> 
> 
> # test extraction
> #e <- extract(raw,extent(3000000,3010000,1000000,1010000))
> 
> # initial raster is 100mx100m -> grid of 100x100 give 10kmx10km areas
> # more consistent with a 100kmx100km area ?
> 
> # anyway test different aggregation scales
> # -> treatment with qgis (or rgdal) ?
> # ok here using resolution ?
> # res in meters
> #resolution = 1000
> #res(raw) <- c(resolution,resolution)
> # incells
> #areasize <- 1000
> # extract a 100kmx100km area
> #e <- extract(raw,extent(3000000,3100000,1000000,1100000))
> 
> 
> 
> simplifyBlock<-function(data,resFactor,areasize){
+   m = matrix(data=data,nrow=areasize,byrow=TRUE)
+   m[is.na(m)] <- 0
+   res=matrix(0,areasize*resFactor,areasize*resFactor)
+   for(x in 1:(areasize*resFactor)){
+     for(y in 1:(areasize*resFactor)){
+       res[x,y]=sum(m[((x-1)/resFactor+1):(x/resFactor),((y-1)/resFactor+1):(y/resFactor)])
+     }
+   }
+   return(res)
+ }
> 
> 
> # plot a block
> #plotSimplifiedBlock <- function(x,y){
> #  e<-getValuesBlock(raw,row=x,nrows=areasize,col=y,ncols=areasize)
> #  m=simplifyBlock(e,0.1,areasize)
> #  r_pop = raster(m)
> #  plot(x=r_pop,col=colorRampPalette(c("white", "red"))(50))
> #}
> 
> 
> 
> 
> # 1) computation on all europe (simplified block 100kmx100km)
> # 2) France with 20kmx20km, including offset of 2km to avoid bord effects
> 
> areasize = 200
> offset = 50
> 
> xvals=seq(from=1,to=nrow(raw)-areasize,by=offset)
> yvals=seq(from=1,to=ncol(raw)-areasize,by=offset)
> #TEST //
> #xvals=seq(from=1,to=400,by=offset)
> #yvals=seq(from=1,to=400,by=offset)
> 
> # coord matrix
> coords = matrix(data=c(rep(xvals,length(yvals)),c(sapply(yvals,rep,length(xvals)))),nrow=length(xvals)*length(yvals))
> 
> 
> # create // cluster
> library(doParallel)
Le chargement a nécessité le package : foreach
Le chargement a nécessité le package : iterators
Le chargement a nécessité le package : parallel
> cl <- makeCluster(16)
> registerDoParallel(cl)
> 
> res <- foreach(i=1:nrow(coords)) %dopar% {
+    library(raster)
+    source('morpho.R')
+    x=coords[i,1];y=coords[i,2];
+    e<-getValuesBlock(raw,row=x,nrows=areasize,col=y,ncols=areasize)
+    if(sum(is.na(e))/length(e)<0.5){
+      show("computing indicators...")
+      m=simplifyBlock(e,0.5,areasize)
+      r_pop = raster(m)
+      r_dens = raster(m/sum(m))
+      res=c(x,y,moranIndex(),averageDistance(),entropy(),rankSizeSlope())
+    }
+    else{res=c(x,y,NA,NA,NA,NA)}
+    res
+ }
> 
> stopCluster(cl)
> 
> 
> # get results into data frame
> vals_mat = matrix(0,length(res),length(res[[1]]))
> for(a in 1:length(res)){vals_mat[a,]=res[[a]]}
> v = data.frame(vals_mat);colnames(v)=c("x","y","moran","distance","entropy","slope")
> 
> 
> # store in data file
> write.table(
+   v,
+   file=paste0(Sys.getenv("CN_HOME"),'/Results/Synthetic/Density/RealData/Numeric/france_20km_',format(Sys.time(), "%a-%b-%d-%H:%M:%S-%Y"),'.csv'),
+   sep = ";",
+   col.names=colnames(v)
+ )
> 
> 
> 
> 
> 
> 
> 
