setwd(paste0(Sys.getenv('CS_HOME'),'/TransportationEquilibrium/Models/Visu'))
setwd(paste0(Sys.getenv('CS_HOME'),'/TransportationEquilibrium/Models/Visu'))
Sys.getenv('CS_HOME')
install.packages("fitdistr")
install.packages("fitdist")
help(fitdistr)
help(fitdist)
library(mass)
library(MASS)
help(fitdistr)
install.packages("fitdistrplus")
library(fitdistrplus)
vignette(package="fitdistrplus")
vignette(paper2JSS)
vignette('paper2JSS')
library(fitdistrplus)
help(fitdist)
data("endosulfan")
ATV <-endosulfan$ATV
library(fitdistrplus)
distrnames = c("norm", "lnorm", "pois", "exp", "gamma", "nbinom", "geom", "beta", "unif","logis")
fits = list()
for(distrname in distrnames){
fits[[distrname]] = fitdistrplus::fitdist(ATV,distr = distrname)
}
distrnames = c("norm", "lnorm", "pois", "exp", "gamma", "nbinom", "geom", "beta", "unif","logis")
fits = list()
for(distrname in distrnames){
fits[[distrname]] = fitdistrplus::fitdist(ATV,distr = distrname,method = "mme")
}
warnings()
distrnames = c("norm", "lnorm", "exp", "gamma", "nbinom", "geom", "unif","logis")
distrnames = c("norm", "lnorm", "exp", "gamma", "nbinom", "geom", "unif","logis")
fits = list()
for(distrname in distrnames){
fits[[distrname]] = fitdistrplus::fitdist(ATV,distr = distrname,method = "mme")
}
warnings()
distrnames = c("norm", "lnorm", "exp", "gamma", "geom", "unif","logis")
fits = list()
for(distrname in distrnames){
fits[[distrname]] = fitdistrplus::fitdist(ATV,distr = distrname,method = "mme")
}
warnings()
distrnames = c("norm", "lnorm", "exp", "gamma", "unif","logis")
fits = list()
for(distrname in distrnames){
fits[[distrname]] = fitdistrplus::fitdist(ATV,distr = distrname,method = "mme")
}
distrnames = c("norm", "lnorm", "exp", "gamma", "unif","logis","weibull")
fits = list()
for(distrname in distrnames){
fits[[distrname]] = fitdistrplus::fitdist(ATV,distr = distrname,method = "mme")
}
fits[[distrname]] = fitdistrplus::fitdist(ATV,distr = distrname,method = "mle")
for(distrname in distrnames){
fits[[distrname]] = fitdistrplus::fitdist(ATV,distr = distrname,method = "mle")
}
distrnames = c("norm", "lnorm", "exp", "gamma", "unif","logis")#,"weibull")
fits = list()
for(distrname in distrnames){
fits[[distrname]] = fitdistrplus::fitdist(ATV,distr = distrname,method = "mme")
}
gofstat(fits)
names(gofstat(fits))
gofstat(fits)$ks
gofstat(fits)$kstest
gofstat(fits)$cvmtest
gofstat(fits)$adtest
hist(ATV,breaks = 100)
data("groundbeef")
fits[[distrname]] = fitdistrplus::fitdist(groundbeef,distr = distrname,method = "mme")
fits = list()
for(distrname in distrnames){
fits[[distrname]] = fitdistrplus::fitdist(groundbeef,distr = distrname,method = "mme")
}
fits = list()
for(distrname in distrnames){
fits[[distrname]] = fitdistrplus::fitdist(groundbeef$serving,distr = distrname,method = "mme")
}
names(gofstat(fits))
gofstat(fits)$kstest
summary(gofstat(fits))
names(gofstat(fits))
gofstat(fits)$kstest
gofstat(fits)
hist(groundbeef$serving,breaks=100)
hist(groundbeef$serving,breaks=10)
hist(groundbeef$serving,breaks=20)
rho = cor.test(x[allinds],y[allinds])
x=rnorm(200)
y=rnorm(200)
rho = cor.test(x[allinds],y[allinds])
rho = cor.test(x,y)
rho$p.value
x=rnorm(200000)
y=rnorm(200000)
rho = cor.test(x,y)
rho$p.value
rho$statistic
x=rnorm(20)
y=rnorm(20)
rho = cor.test(x,y)
rho$statistic
# setwd with env var : need Sys.getenv
setwd(paste0(Sys.getenv("CS_HOME"),'/Models/Density'))
# setwd with env var : need Sys.getenv
setwd(paste0(Sys.getenv("CS_HOME"),'/ReactionDiffusion/Models/Density'))
# load plot utils
source(paste0(Sys.getenv("CN_HOME"),'/Models/Utils/R/plots.R'))
# load plot utils
source(paste0(Sys.getenv("CS_HOME"),'/CityNetwork/Models/Utils/R/plots.R'))
library(ggplot2)
library(dplyr)
source(paste0(Sys.getenv("CS_HOME"),'/CityNetwork/Models/Utils/R/plots.R'))
# load result
res = as.tbl(read.csv(paste0(Sys.getenv("CS_HOME"),'/ReactionDiffusion/Results/Density/20151110_GridLHS/data/2015_11_10_18_11_05_GRID_LHS.csv'),sep=','))
# transform as usable data structure
#indics_cols = c(4,5,7,10,11)
indics_cols = 6:10
#params_cols = c(1,2,3,6,8)
params_cols = 1:5
res %>% group_by(id) %>% summarise(count = n())
res %>% group_by(replication) %>% summarise(count = n())
dim(res)
res %>% group_by(id) %>% summarise(count = n())
names(res)
res %>% group_by(diffusion,diffusionsteps,alphalocalization,growthrate,population) %>% summarise(count = n())
sres = res %>% group_by(id) %>% summarise(moranSd = sd(moran),moran=mean(moran),distanceSd = sd(distance),distance=mean(distance),
entropySd = sd(entropy),entropy=mean(entropy),slopeSd = sd(slope),slope=mean(slope),rsquaredSd=sd(rsquared),rsquared=mean(rsquared)
)
#m=data.frame(matrix(data=unlist(p$mean),ncol=5,byrow=TRUE),matrix(data=unlist(p$param),ncol=5,byrow=TRUE));names(m)<- c("distance","entropy","moran","rsquared","slope","alphalocalization","diffusion","diffusionsteps","growthrate","population")
#m = sres[,indics]
m=sres
####
sres[sres$entropy<0.2,]
####
sres[sres$entropy<0.2&sres$distance<0.2,]
####
sres[sres$entropy<0.2&sres$distance<0.2&sres$slope<-2,]
####
sres[sres$entropy<0.2&sres$distance<0.2&sres$slope<(-2),]
####
sres[sres$entropy<0.2&sres$distance<0.2&sres$slope<(-1),]
####
sres[sres$entropy<0.2&sres$distance<0.2&sres$slope<(-1)&sres$moran>0.2,]
####
sres[sres$entropy<0.2&sres$distance<0.2&sres$slope<(-1)&sres$moran>0.1,]
####
sres[sres$entropy<0.2&sres$distance<0.2&sres$slope<(-1)&sres$moran<0.1,]
